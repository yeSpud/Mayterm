/*
 * Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package javafx.scene.transform;

/**
Builder class for javafx.scene.transform.Rotate
@see javafx.scene.transform.Rotate
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public class RotateBuilder<B extends javafx.scene.transform.RotateBuilder<B>> implements javafx.util.Builder<javafx.scene.transform.Rotate> {
    protected RotateBuilder() {
    }

    /** Creates a new instance of RotateBuilder. */
    @SuppressWarnings({"deprecation", "rawtypes", "unchecked"})
    public static javafx.scene.transform.RotateBuilder<?> create() {
        return new javafx.scene.transform.RotateBuilder();
    }

    private int __set;
    public void applyTo(javafx.scene.transform.Rotate x) {
        int set = __set;
        if ((set & (1 << 0)) != 0) x.setAngle(this.angle);
        if ((set & (1 << 1)) != 0) x.setAxis(this.axis);
        if ((set & (1 << 2)) != 0) x.setPivotX(this.pivotX);
        if ((set & (1 << 3)) != 0) x.setPivotY(this.pivotY);
        if ((set & (1 << 4)) != 0) x.setPivotZ(this.pivotZ);
    }

    private double angle;
    /**
    Set the value of the {@link javafx.scene.transform.Rotate#getAngle() angle} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B angle(double x) {
        this.angle = x;
        __set |= 1 << 0;
        return (B) this;
    }

    private javafx.geometry.Point3D axis;
    /**
    Set the value of the {@link javafx.scene.transform.Rotate#getAxis() axis} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B axis(javafx.geometry.Point3D x) {
        this.axis = x;
        __set |= 1 << 1;
        return (B) this;
    }

    private double pivotX;
    /**
    Set the value of the {@link javafx.scene.transform.Rotate#getPivotX() pivotX} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B pivotX(double x) {
        this.pivotX = x;
        __set |= 1 << 2;
        return (B) this;
    }

    private double pivotY;
    /**
    Set the value of the {@link javafx.scene.transform.Rotate#getPivotY() pivotY} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B pivotY(double x) {
        this.pivotY = x;
        __set |= 1 << 3;
        return (B) this;
    }

    private double pivotZ;
    /**
    Set the value of the {@link javafx.scene.transform.Rotate#getPivotZ() pivotZ} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B pivotZ(double x) {
        this.pivotZ = x;
        __set |= 1 << 4;
        return (B) this;
    }

    /**
    Make an instance of {@link javafx.scene.transform.Rotate} based on the properties set on this builder.
    */
    public javafx.scene.transform.Rotate build() {
        javafx.scene.transform.Rotate x = new javafx.scene.transform.Rotate();
        applyTo(x);
        return x;
    }
}

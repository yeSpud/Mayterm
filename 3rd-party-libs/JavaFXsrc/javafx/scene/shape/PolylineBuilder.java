/*
 * Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package javafx.scene.shape;

/**
Builder class for javafx.scene.shape.Polyline
@see javafx.scene.shape.Polyline
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public class PolylineBuilder<B extends javafx.scene.shape.PolylineBuilder<B>> extends javafx.scene.shape.ShapeBuilder<B> implements javafx.util.Builder<javafx.scene.shape.Polyline> {
    protected PolylineBuilder() {
    }

    /** Creates a new instance of PolylineBuilder. */
    @SuppressWarnings({"deprecation", "rawtypes", "unchecked"})
    public static javafx.scene.shape.PolylineBuilder<?> create() {
        return new javafx.scene.shape.PolylineBuilder();
    }

    private boolean __set;
    public void applyTo(javafx.scene.shape.Polyline x) {
        super.applyTo(x);
        if (__set) x.getPoints().addAll(this.points);
    }

    private java.util.Collection<? extends java.lang.Double> points;
    /**
    Add the given items to the List of items in the {@link javafx.scene.shape.Polyline#getPoints() points} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B points(java.util.Collection<? extends java.lang.Double> x) {
        this.points = x;
        __set = true;
        return (B) this;
    }

    /**
    Add the given items to the List of items in the {@link javafx.scene.shape.Polyline#getPoints() points} property for the instance constructed by this builder.
    */
    public B points(java.lang.Double... x) {
        return points(java.util.Arrays.asList(x));
    }

    /**
    Make an instance of {@link javafx.scene.shape.Polyline} based on the properties set on this builder.
    */
    public javafx.scene.shape.Polyline build() {
        javafx.scene.shape.Polyline x = new javafx.scene.shape.Polyline();
        applyTo(x);
        return x;
    }
}

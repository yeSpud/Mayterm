/*
 * Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package javafx.scene.control;

/**
Builder class for javafx.scene.control.Menu
@see javafx.scene.control.Menu
@deprecated This class is deprecated and will be removed in the next version
* @since JavaFX 2.0
*/
@javax.annotation.Generated("Generated by javafx.builder.processor.BuilderProcessor")
@Deprecated
public class MenuBuilder<B extends javafx.scene.control.MenuBuilder<B>> extends javafx.scene.control.MenuItemBuilder<B> {
    protected MenuBuilder() {
    }

    /** Creates a new instance of MenuBuilder. */
    @SuppressWarnings({"deprecation", "rawtypes", "unchecked"})
    public static javafx.scene.control.MenuBuilder<?> create() {
        return new javafx.scene.control.MenuBuilder();
    }

    private int __set;
    public void applyTo(javafx.scene.control.Menu x) {
        super.applyTo(x);
        int set = __set;
        if ((set & (1 << 0)) != 0) x.getItems().addAll(this.items);
        if ((set & (1 << 1)) != 0) x.setOnHidden(this.onHidden);
        if ((set & (1 << 2)) != 0) x.setOnHiding(this.onHiding);
        if ((set & (1 << 3)) != 0) x.setOnShowing(this.onShowing);
        if ((set & (1 << 4)) != 0) x.setOnShown(this.onShown);
    }

    private java.util.Collection<? extends javafx.scene.control.MenuItem> items;
    /**
    Add the given items to the List of items in the {@link javafx.scene.control.Menu#getItems() items} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B items(java.util.Collection<? extends javafx.scene.control.MenuItem> x) {
        this.items = x;
        __set |= 1 << 0;
        return (B) this;
    }

    /**
    Add the given items to the List of items in the {@link javafx.scene.control.Menu#getItems() items} property for the instance constructed by this builder.
    */
    public B items(javafx.scene.control.MenuItem... x) {
        return items(java.util.Arrays.asList(x));
    }

    private javafx.event.EventHandler<javafx.event.Event> onHidden;
    /**
    Set the value of the {@link javafx.scene.control.Menu#getOnHidden() onHidden} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B onHidden(javafx.event.EventHandler<javafx.event.Event> x) {
        this.onHidden = x;
        __set |= 1 << 1;
        return (B) this;
    }

    private javafx.event.EventHandler<javafx.event.Event> onHiding;
    /**
    Set the value of the {@link javafx.scene.control.Menu#getOnHiding() onHiding} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B onHiding(javafx.event.EventHandler<javafx.event.Event> x) {
        this.onHiding = x;
        __set |= 1 << 2;
        return (B) this;
    }

    private javafx.event.EventHandler<javafx.event.Event> onShowing;
    /**
    Set the value of the {@link javafx.scene.control.Menu#getOnShowing() onShowing} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B onShowing(javafx.event.EventHandler<javafx.event.Event> x) {
        this.onShowing = x;
        __set |= 1 << 3;
        return (B) this;
    }

    private javafx.event.EventHandler<javafx.event.Event> onShown;
    /**
    Set the value of the {@link javafx.scene.control.Menu#getOnShown() onShown} property for the instance constructed by this builder.
    */
    @SuppressWarnings("unchecked")
    public B onShown(javafx.event.EventHandler<javafx.event.Event> x) {
        this.onShown = x;
        __set |= 1 << 4;
        return (B) this;
    }

    /**
    Make an instance of {@link javafx.scene.control.Menu} based on the properties set on this builder.
    */
    public javafx.scene.control.Menu build() {
        javafx.scene.control.Menu x = new javafx.scene.control.Menu();
        applyTo(x);
        return x;
    }
}
